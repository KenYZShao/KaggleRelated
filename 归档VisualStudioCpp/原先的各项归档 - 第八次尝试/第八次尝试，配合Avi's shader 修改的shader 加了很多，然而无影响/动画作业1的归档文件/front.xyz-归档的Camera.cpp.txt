#include "Camera.h"
//#include <wingdi.h>//Shao added
//#include <WinUser.h>//Shao added
//#include <glm/ext/quaternion_trigonometric.hpp>//Shao added

Camera::Camera() {}//This cannot be removed, otherwise the project won't run.

Camera::Camera(glm::vec3 startPosition, glm::vec3 startUp, GLfloat startYaw, GLfloat startPitch, GLfloat startMoveSpeed, GLfloat startTurnSpeed)
{
	
	position = startPosition;//Original from Udemy, here could be changed for 1st or 3rd person view.
	worldUp = startUp;
	yaw = startYaw;
	pitch = startPitch;
	front = glm::vec3(0.0f, 0.0f, -1.0f);

	moveSpeed = startMoveSpeed;
	turnSpeed = startTurnSpeed;

	update();
}

void Camera::keyControl(bool* keys, GLfloat deltaTime)
{
	GLfloat velocity = moveSpeed * deltaTime;

	/*//This chunk of code is originally from Udemy
	if (keys[GLFW_KEY_W])
	{
		position += front * velocity;
	}

	if (keys[GLFW_KEY_S])
	{
		position -= front * velocity;
	}

	if (keys[GLFW_KEY_A])
	{
		position -= right * velocity;
	}

	if (keys[GLFW_KEY_D])
	{
		position += right * velocity;
	}
	*/

	//The below lines of code is written by Shao, for making the keyboard controlling of the airplane
	if (keys[GLFW_KEY_W])
	{
		position -= front * velocity;//Wait to be changed
	}

	if (keys[GLFW_KEY_S])
	{
		position += front * velocity;
	}

	if (keys[GLFW_KEY_A])
	{
		position += right * velocity;
	}

	if (keys[GLFW_KEY_D])
	{
		position -= right * velocity;
	}

	if (keys[GLFW_KEY_Q])
	{
		position -= front.x * velocity;//Wait to be changed
	}
	if (keys[GLFW_KEY_E])
	{
		position += front.x * velocity;//Wait to be changed
	}
	if (keys[GLFW_KEY_Z])
	{
		position -= front.y * velocity;//Wait to be changed
	}
	if (keys[GLFW_KEY_C])
	{
		position += front.y * velocity;//Wait to be changed
	}
	if (keys[GLFW_KEY_H])
	{
		position -= front.z * velocity;//Wait to be changed
	}
	if (keys[GLFW_KEY_K])
	{
		position += front.z * velocity;//Wait to be changed
	}
	//Shao modified up to here, for keyboard controlling the airplane
}

void Camera::mouseControl(GLfloat xChange, GLfloat yChange)
{
	xChange *= turnSpeed;
	yChange *= turnSpeed;

	yaw += xChange;
	pitch += yChange;

	if (pitch > 89.0f)
	{
		pitch = 89.0f;
	}
	if (pitch < -89.0f)
	{
		pitch = -89.0f;
	}
	update();
}

glm::mat4 Camera::calculateViewMatrix()
{
	return glm::lookAt(position, position + front, up);
}

glm::vec3 Camera::getCameraPosition()
{
	return position;
}
glm::vec3 Camera::getCameraDirection()
{
	return glm::normalize(front);
}

void Camera::update()
{
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
	front = glm::normalize(front);

	right = glm::normalize(glm::cross(front, worldUp));
	up = glm::normalize(glm::cross(right, front));


}
/*
//Shao edited, referenced from https://cloudstack.ninja/mike-f/opengl-combining-yaw-pitch-roll/, but shows many redlines
void UpdateCameraVectors()
{
	// Yaw
	glm::quat aroundY = glm::angleAxis(glm::radians(-RightAngle), glm::vec3(0, 1, 0));

	// Pitch
	glm::quat aroundX = glm::angleAxis(glm::radians(UpAngle), glm::vec3(1, 0, 0));

	// Roll
	glm::quat aroundZ = glm::angleAxis(glm::radians(RollAngle), glm::vec3(0, 0, 1));

	Orientation = aroundY * aroundX;

	glm::quat qF = Orientation * glm::quat(0, 0, 0, -1) * glm::conjugate(Orientation);
	Front = { qF.x, qF.y, qF.z };
	Right = glm::normalize(glm::cross(Front, glm::vec3(0, 1, 0)));
	
}
//Shao edited
*/
/*
void UpdateCameraVectors()
{
	// Yaw
	glm::quat aroundY = glm::angleAxis(glm::radians(-RightAngle), glm::vec3(0, 1, 0));

	// Pitch
	glm::quat aroundX = glm::angleAxis(glm::radians(UpAngle), glm::vec3(1, 0, 0));

	// Roll
	glm::quat aroundZ = glm::angleAxis(glm::radians(RollAngle), glm::vec3(0, 0, 1));

	Orientation = aroundY * aroundX;

	glm::quat qF = Orientation * glm::quat(0, 0, 0, -1) * glm::conjugate(Orientation);
	Front = { qF.x, qF.y, qF.z };
	Right = glm::normalize(glm::cross(Front, glm::vec3(0, 1, 0)));
}
*/
Camera::~Camera()
{
}
