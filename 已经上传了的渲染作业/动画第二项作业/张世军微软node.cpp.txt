#include "node.h"
#include <glm/glm.hpp>
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtc/type_ptr.hpp"
#include "glm/gtc/quaternion.hpp"
#include "glm/gtx/quaternion.hpp"
#include <cstdio>

Node::Node(float len) {
length = len;
Mat = glm::mat4(1.0f);
//pos = glm::mat4(1.0f);
parent = NULL;
child = NULL;
rotation = glm::vec3(0.0f);
coordinates = glm::vec3(0.0f);
};

Node* Node::add(Node *n) {
n->parent = this;
this->child = n;
return n;
}

glm::vec4 Node::getEndPosition() {
return glm::translate(getTransMat(), glm::vec3(0.0f, 0.0f, length)) * glm::vec4(0.0f, 0.0f, 0.0f, 1.0f);
}

glm::mat4 Node::getTransMat() {
glm::mat4 pos = glm::mat4();
if (parent != NULL) {
pos = glm::translate(pos, glm::vec3(0.0f, 0.0f, parent->length));
pos = glm::rotate(pos, rotation.x, glm::vec3(pos*glm::vec4(1.0f, 0.0f, 0.0f, 0.0f)));
pos = glm::rotate(pos, rotation.y, glm::vec3(pos*glm::vec4(0.0f, 1.0f, 0.0f, 0.0f)));
pos = glm::rotate(pos, rotation.z, glm::vec3(pos*glm::vec4(0.0f, 0.0f, 1.0f, 0.0f)));
pos = parent->getTransMat() * pos;
} else {
pos = glm::rotate(pos, 90.0f, glm::vec3(-1.0f, 0.0f, 0.0f));
}
return pos;
}

Node* Node::setRotateAngle(float dx, float dy, float dz) {
rotation.x += dx;
rotation.y += dy;
rotation.z += dz;
return this;
}

Node* Node::FindFinalChild() {
if (this->child == NULL) {
return this;
}
return this->child->FindFinalChild();
}

Node::~Node() {
delete this;
}